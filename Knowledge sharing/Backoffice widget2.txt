Backoffice Widget creation:
-------------------------------

1. make an entry in vodafonebackoffice-config.xml
	<context component="oms-explorer-tree">
		<n:explorer-tree xmlns:n="http://www.hybris.com/cockpitng/config/explorertree">
			<n:navigation-node id="ordermanagementbackoffice.treenode.shiva" />
		</n:explorer-tree>
	</context>
	
	ordermanagementbackoffice.treenode.shiva=shiva

2. create widget in vodafonebackoffice-widget.xmlns
	<widget-extension widgetId="omsExplorerTree">
		<widget id="shivaConditionEvaluator" widgetDefinitionId="com.hybris.cockpitng.conditionevaluator"
			slotId="cockpitWidgetChildrenInvisible" template="false" access="admin">
			<widget id="ShivaPopUpWidget" widgetDefinitionId="hu.vodafone.widgets.VodafoneShivaPopUpWidget"
				slotId="cockpitWidgetChildrenInvisible" template="true" title="Shiva">
				<widget id="wizardNotificationWidget1" widgetDefinitionId="com.hybris.backoffice.notificationarea"
					slotId="wizardNotificationarea" template="false">
					<setting key="notificationId" type="String">creationWizard</setting>
					<setting key="widgetStyleAttribute" type="String"></setting>
					<setting key="debugLog" type="Boolean">false</setting>
					<setting key="widgetStyleClass" type="String"></setting>
					<setting key="stackSize" type="Integer">3</setting>
					<virtual-sockets />
				</widget>
				<instance-settings socketEventRoutingMode="LAST_USED">
					<create onInit="false" reuseExisting="false">
						<all-incoming-events />
					</create>
					<close>
						<all-outgoing-events />
					</close>
					<select onInit="false">
						<all-incoming-events />
					</select>
				</instance-settings>
				<setting key="notificationId" type="String">creationWizard</setting>
				<setting key="widgetStyleAttribute" type="String"></setting>
				<setting key="widgetStyleClass" type="String"></setting>
				<setting key="_width" type="String">400px</setting>
				<setting key="_height" type="String">200px</setting>
				<setting key="sortableListHeader" type="Boolean">true</setting>
				<virtual-sockets />
			</widget>

			<setting key="expression" type="String">#root.id EQ
				'ordermanagementbackoffice.treenode.shiva'</setting>
			<setting key="socketDataType_$T" type="String">com.hybris.backoffice.navigation.NavigationNode
			</setting>
			<setting key="navigationNodeId" type="String" value="ordermanagementbackoffice.treenode.shiva" />
			<virtual-sockets />
		</widget>
	</widget-extension>
	
	<widget-connection sourceWidgetId="omsExplorerTree"
		outputId="nodeSelected" targetWidgetId="shivaConditionEvaluator"
		inputId="input" />
	<widget-connection sourceWidgetId="shivaConditionEvaluator"
		outputId="true" targetWidgetId="ShivaPopUpWidget" inputId="nodeSelected" />
		
3. We have to create one definition.xml and filename.zul file for every widget
	WidgetFolder
		definition.xml
		filename.zul
		controller.java
		
	definition.xml:
	---------------
	<?xml version="1.0" encoding="UTF-8"?>
	<widget-definition xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.hybris.com/schema/cockpitng/widget-definition.xsd"
		id="hu.vodafone.widgets.VodafoneShivaPopUpWidget">
			
		<name>Bulk Upload</name>
		<description>Bulk Upload</description>
		<defaultTitle>Bulk Upload</defaultTitle>
		<author>hybris</author>
		<version>1.0</version>
	
		<view src="vodafoneShivawidget.zul" />
		<sockets>
			<input id="nodeSelected" type="com.hybris.backoffice.navigation.NavigationNode" />
			<output id="outContext" type="com.hybris.backoffice.widgets.advancedsearch.impl.AdvancedSearchInitContext" />
		</sockets>
		<keywords>
			<keyword>vodafonebackoffice</keyword>
		</keywords>
		<controller class="hu.vodafone.widgets.VodafoneShivaController" />
	</widget-definition>
	
	vodafoneShivawidget.zul:
	------------------------
	<?xml version="1.0" encoding="UTF-8"?>
	<widget xmlns="http://www.zkoss.org/2005/zul"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:h="http://www.w3.org/1999/xhtml"
		xmlns:w="http://www.zkoss.org/2005/zk/client"
		xmlns:zk="http://www.zkoss.org/2005/zk"
		xsi:schemaLocation="http://www.zkoss.org/2005/zul http://www.hybris.com/schema/cockpitng/zul/zul.xsd"
 		height="100%">
 		
 		
		<div id="parentDiv" >
		<label>Hi this is shiva</label>
		<h:br />
		<button id="open" label="${vodafone.button.open}"/>
		<h:br />
		<button id="close" label="${vodafone.button.open}"/>	
		</div>
 	</widget>
	
	VodafoneShivaController:
	------------------------
	public class VodafoneShivaController extends DefaultWidgetController {

		/**
		* This field holds the value of serialVersionUID
		*/
		private static final long serialVersionUID = 1L;
	
		@Wire
		Button close;
	
		@Autowired
		EventService eventService;
	
		@Override
		public void initialize(final Component comp)
		{
			super.initialize(comp);
			// we can write on load custom logic for window or popup or any action
			close.setDisabled(true);
		}
	
		@ViewEvent(eventName = Events.ON_CLICK, componentID = "open")
		public void perofmAction() {
	
			eventService.publishEvent(new ShivaEvent());
			closeWindowIfTemplate();
		}
	}
	// to close the pop up window after performing any action
	protected void closeWindowIfTemplate() {
		 LOG.debug("OMS:: VodafoneOrderStatusChangeController:: closeWindowIfTemplate::Start");
	        final WidgetInstance currentInstance = getWidgetInstanceManager().getWidgetslot().getWidgetInstance();
	        if ((currentInstance == null) || (!(currentInstance.getWidget().isTemplate()))) {
	            return;
	        }
	        final WidgetContainer parentWidgetContainer = WidgetTreeUIUtils.getParentWidgetContainer(getWidgetInstanceManager().getWidgetslot());
	        getWidgetInstanceManager().getWidgetslot();
	        widgetInstanceFacade.removeWidgetInstance(currentInstance);
	        if (parentWidgetContainer == null) {
	            return;
	        }
	        parentWidgetContainer.updateView();
	        LOG.debug("OMS:: VodafoneOrderStatusChangeController:: closeWindowIfTemplate::END");
	    }
	